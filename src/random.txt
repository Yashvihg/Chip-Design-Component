import React from "react";
import { RxAvatar } from "react-icons/rx";
import { IoClose } from "react-icons/io5";
import "./ContactChip.css";

interface ChipProps {
  label: string;
  onDelete: () => void;
  email: string;
}

const ContactChip: React.FC<ChipProps> = ({ label, onDelete, email }) => {
  return (
    <div className="chip">
      <RxAvatar /> {label}
      <span onClick={onDelete}>
        <IoClose />
      </span>
    </div>
  );
};

export default ContactChip;


import React, { KeyboardEvent } from "react";
import "./InputField.css";

interface InputFieldProps {
  value: string;
  onChange: (value: string) => void;
  onKeyDown: (e: KeyboardEvent<HTMLInputElement>) => void;
  onClickHandler: () => void;
  onBlurHandler: () => void;
}

const InputField: React.FC<InputFieldProps> = ({
  value,
  onChange,
  onKeyDown,
  onClickHandler,
  onBlurHandler,
}) => {
  return (
    <input
      className="inputfield"
      type="text"
      value={value}
      onChange={(e) => onChange(e.target.value)}
      onKeyDown={onKeyDown}
      onClick={onClickHandler}
      onBlur={onBlurHandler}
      placeholder="Type to filter items"
    />
  );
};

export default InputField;


import React from "react";
import "./DropDown.css";
import { dataFormat } from "../../App";
import { RxAvatar } from "react-icons/rx";

interface DropdownProps {
  items: dataFormat[];
  inputValue: string;
  onItemClick: (item: dataFormat) => void;
}

const DropDown: React.FC<DropdownProps> = ({
  items,
  inputValue,
  onItemClick,
}) => {
  return (
    <div className="dropdown">
      {items
        .filter((item) =>
          item.name.toLowerCase().includes(inputValue.toLowerCase())
        )
        .map((item) => (
          <div
            key={item.id}
            className="dropdown-item"
            onClick={() => {
              onItemClick(item);
            }}
          >
            <div className="item">
              <RxAvatar className="avatar" /> {item.name}{" "}
              <div className="email">{item.email}</div>
            </div>
          </div>
        ))}
    </div>
  );
};

export default DropDown;




APP: 

import React, { useEffect, useRef, useState } from "react";
import "./App.css";
import InputField from "./components/InputField/InputField";
import DropDown from "./components/DropDown/DropDown";
import data from "./ChipData.json";
import ContactChip from "./components/ContactChip/ContactChip";

export interface dataFormat {
  id: number;
  name: string;
  email: string;
}

interface Chip {
  id: number;
  label: string;
  email: string;
}

const App: React.FC = () => {
  const [inputValue, setInputValue] = useState<string>("");
  const [users, setUsers] = useState<dataFormat[]>(data.users);
  // const [users, setUsers] = useState<string[]>(['Apple', 'Banana', 'Cherry', 'Date']);
  const [chips, setChips] = useState<Chip[]>([]);
  const [isDropdownVisible, setIsDropdownVisible] = useState<boolean>(false);

  const inputRef = useRef<HTMLInputElement>(null);
  // const users = data.users;

  useEffect(() => {
    if (inputRef.current) {
      setTimeout(() => {
        inputRef.current?.focus();
      }, 0);
    }
  }, [chips]);

  const handleInputValue = (value: string) => {
    setInputValue(value);
  };

  const handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Backspace" && inputValue === "" && chips.length > 0) {
      const lastChip = chips[chips.length - 1];
      setChips(chips.slice(0, -1));
      // setUsers([...users, lastChip.label]);
      setUsers([
        ...users,
        { id: -1, name: lastChip.label, email: lastChip.email },
      ]);
    }
  };

  // const handleItemClick = (items: dataFormat[]) => {
  //   setChips([...chips, { id: chips.length + 1, label: item }]);
  //   setUsers(items.filter((item) => item.name !== item.name));
  //   setInputValue("");
  //   setIsDropdownVisible(false);
  // };

  const handleItemClick = (item: dataFormat) => {
    console.log(item);
    setChips([...chips, { id: item.id, label: item.name, email: item.email }]);
    setUsers(users.filter((user) => user.id !== item.id));
    setInputValue("");
    setIsDropdownVisible(false);
  };

  const handleChipDelete = (chip: Chip) => {
    console.log(chip);
    setChips(chips.filter((c) => c.id !== chip.id));
    // setItems([...items, chip.label]);
    setUsers([...users, { id: chip.id, name: chip.label, email: chip.email }]);
  };

  const handleInputClick = () => {
    setIsDropdownVisible(true);
  };

  const handleInputBlur = () => {
    setIsDropdownVisible(false);
  };

  return (
    <div className="App">
      <InputField
        value={inputValue}
        onChange={handleInputValue}
        onKeyDown={handleInputKeyDown}
        onClickHandler={handleInputClick}
        onBlurHandler={handleInputBlur}
      />
      {/* <div style={{ display: isDropdownVisible ? "block" : "none" }}> */}
      <DropDown
        items={users}
        inputValue={inputValue}
        onItemClick={handleItemClick}
      />
      {/* </div> */}
      <div className="chips-container">
        {chips.map((chip) => (
          <ContactChip
            key={chip.id}
            label={chip.label}
            onDelete={() => handleChipDelete(chip)}
            email=""
          />
        ))}
      </div>
    </div>
  );
};

export default App;


















import React from "react";
import "./DropDown.css";
import { dataFormat } from "../../App";
import { RxAvatar } from "react-icons/rx";

interface DropdownProps {
  items: dataFormat[];
  inputValue: string;
  onItemClick: (item: dataFormat) => void;
  isDropdownVisible: boolean;
}

const DropDown: React.FC<DropdownProps> = ({
  items,
  inputValue,
  onItemClick,
  isDropdownVisible,
}) => {
  return (
    <div
      className="dropdown"
      style={{ display: isDropdownVisible ? "block" : "none" }}
    >
      {items
        .filter((item) =>
          item.name.toLowerCase().includes(inputValue.toLowerCase())
        )
        .map((item) => (
          <div
            key={item.id}
            className="dropdown-item"
            onClick={() => {
              onItemClick(item);
            }}
          >
            <div className="item">
              <RxAvatar className="avatar" /> {item.name}{" "}
              <div className="email">{item.email}</div>
            </div>
          </div>
        ))}
    </div>
  );
};

export default DropDown;
